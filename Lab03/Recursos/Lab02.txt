*****TEMA 02 Implementación de acceso a datos*****

Permite recuperar y manipular datos.
* Ado.Net es la unica libreria propia de Microsoft para conectarse a las BD 

2 formas de trabajar con datos(conectado y desconectado)
COnectado=> 
	Connection(Se indica la ruta del motor de BD, Open para abrir conexion a BD), 
	Command(Configuramos la consulta SQL que queremos ejecutar en la BD),
	DataReader(para leer el resultado)

DataAdapter(Deprecated)

BD=>XXConntection=>XXCommand=>((XXDataAdapater=>DataSet),XXDataReader)

.NET DATA Providers
SQL SERVER,ORACLE


Interfaces (Contratos)                       .Net Framework Data Provider para SQL SERVER
IDbConnection              ----> 		SqlConnection
IDbCommand                 ---->		SqlCOmmand
IDbDataReades              ---->		SqlDataReader


<connectionString>

*Server=MiServer => Es la Instancia del Servidor
*Database=VentasDemo=> Es la BD
*Trusted_COnnection=YES || IntegratedSecurity 
</connectionString>

*Para web se recomienda la cadena de conexión IntegratedSecurity 
*Para window form se recomienda usar sql server(userid="sa")

Execute Scalar => Para recuperar datos puntuales, por ejemplo un PK
Execute Reader=> Ejecutar un conjunto de datos
Execute Non Query=>Cuando no leera ningun resultado


Fill=>
Update=>

***ENfoque Desconectado***
DataSet: Tener en Memoria una o varias tablas
DataTable: Representa las Tablas de DataSet

Un Dataset puede acceder a sus tablas por su colección Tables:
	-ds.Tables["Person"]        ||       ds.Tables[0]



***GIT HUB***
GitHub trabaja sobre la tecnologia del software GIT(Local,Remoto)
COmandos:Clone,ADD, Pull(Obtener todos los cambios), Commit(Confirmado localmente), Push(Subir para todos los programadores)
El Commit de la interfaz GitHub Desktop nos salta el paso de ADD(ya que internamente lo realiza)

***JIRA***
Plasmar el ciclo de vida de un proyecto de aplicaciones basadas en metodologías agiles. 



TAREA

dbo.Genre
todo igual a la capa data aumentando los métodos Update y Delete;




